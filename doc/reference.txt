Classes
	Team
	Student
	Day
	IOManager

Team:
	Contains multiple students to form a single team.

	Dependencies:
		Student
		Day

	Members:
		__members - list
		__minsize - int
		__maxsize - int
		__rating - float
		__init__(int, int)
		__eq__(team)
		__str__()
		getMemberByIndex(int)
		getMemberList()
		getMinSize()
		getMaxSize()
		getRating()
		setMinSize()
		setMaxSize()
		setRating()
		getTeamSize()
		insertStudent(student)
		remStudent(student)
		purgeMembers()

	Team.__init__(self,minimum,maximum)

		Parameters:
		minimum - int that will be the min team size
		maximum - int that will be the max team size

		Description:
		Creates an instance of team with minimum and maximum size set. Also initializes
		the team members to be an empty list.

	Team.__eq__(self,other)
		
		Parameters:
		other - a team, to compare against

		Description:
		Returns true if self and other are equivalent, false otherwise.

	Team.__str__(self)

		Description:
		Returns a string that is a representation of the team.

	Team.getMemberByIndex(self,i)
			
		Parameters:
		i - an integer index to an element in __members

		Description:
		Returns a student which is the ith member of the team.

	Team.getMemberList(self)

		Description:
		Returns the entire list of team members for this team.

	Team.getMinSize(self)
			
		Description:
		Returns the minimum team size.

	Team.getMaxSize(self)

		Description:
		Returns the maximum team size.

	Team.getRating(self)

		Description:
		Returns the rating of this team.

	Team.setMinSize(self,i)

		Parameters:
		i - an integer

		Description:
		Updates __minsize to be equal to i.

	Team.setMaxSize(self, i)
			
		Parameters:
		i - an integer
			
		Description:
		Updates __maxsize to be equal to i.

	Team.setRating(self, i)

		Parameters:
		i - a float

		Description:
		Updates __rating to be equal to i.

	Team.getTeamSize(self)
	
		Description:
		Returns an integer that represents the current number of members on this team.

	Team.insertStudent(self, s)

		Parameters:
		s - a student that is to be inserted.

		Description:
		Appends student to the list of team members only if the student is not on the team
		and if there is room available on the team. Returns true if insertion successful.
		False in all other cases.

	Team.remStudent(self, s)

		Parameters:
		s - a student to be removed.

		Description:
		Removes s from the team if s is found in the team members list. Returns true if
		removal is successful, false otherwise.
			
	Team.purgeMembers(self)

		Description:
		Empties the entire list of team members.
	

Student:

	Holds information on a single student.

	Dependencies:
		Day

	Members:
		__name - string
		__email - string
		__filters - dict
		__init__(str,str)
		__eq__(student)
		__str__()
		getName()
		getEmail()
		getPrefs()
		setName(str)
		setEmail(str)
		setFilters(dict)

	Student.__init__(self,pname,pemail)

		Parameters:
		pname - a string of the student's name.
		pemail - a string of the student's email address.

		Description:
		Creates an instance of student with name = pname and email = pemail. Also
		initializes filters to an empty dict.

	Student.__eq__(self,other)

		Parameters:
		other - the student to compare with

		Description:
		Returns true if self.__email equals other.__email.

	Student.__str__(self)

		Description:
		Returns a string with format "<name> <email>".

	Student.getName()

		Description:
		Returns student's name(str).

	Student.getEmail()

		Description:
		Returns student's email address(str).

	Student.getPrefs()

		Description:
		Returns the student's preferences(dict).
	
	Student.setName(n)

		Parameters:
		n - a string of the new name.

		Description:
		Assigns n to the student's name.

	Student.setEmail(e)

		Parameters:
		n - a string of the new email address.

		Description:
		Assigns e to the student's email.

	Student.setFilters(f)

		Parameters:
		f - a dict of student preferences.

		Description:
		Assigns f to the student's preferences.

Day
	Holds information for available times on a single day.

	Dependenies:
	N/A

	Members:
		__name - string
		__times - list
		__init__(str)
		__eq__(Day)
		__str__()
		getName()
		getTimes()
		setName(str)
		insertTime(int)
		remTime(int)
		purgeTime()
		

	Day.__init__(self,d)
		
		Parameters:
		d - string for the day name
		
		Description:
		Creates an instance of day with name set to n and an empty list of times.

	Day.__eq__(self,other)

		Parameters:
		other- a Day, to compare against

		Description:
		Returns true if self and other are equivalent, false otherwise.

	Day.__str__(self)

		Description:
		Returns a string that represents the day.

	Day.getName(self)

		Description:
		Returns a string of the day's name.

	Day.getTimes()

		Description:
		Returns the list of times associated with this day.

	Day.setName(self,n)

		Parameters:
		n - a string, will be the new name.

		Descriptions:
		Updates the day's name to be the new name, n.

	Day.insertTime(self,t)

		Parameters:
		t - an int, represents an hour

		Description:
		Adds t to the day if valid. Returns true if successful insertion, false otherwise.
		The time t is invalid if not in range [0,23], not an integer, or already is 
		associated with this day.

	Day.removeTime(self, t)

		Parameters:
		t - an int, represents an hour

		Description:
		Removes t from the list a times associated with this day. Returns true if t is
		found and removed, false otherwise.

	Day.purgeTime(self)

		Description:
		Clears all times associated with this day.

IOManager
	
	Handles important data from file to Student and Day data structures.

	Dependencies:
	Day
	Student
	difflib
	csv
	sys

	Members:
	__init__(str[],str,str)
	read(str)
	write(str,team[])
	csvReader(str)
	txtWriter(str,team[])
	blockParser(str)
	nameChecker(str)

	IOManager.__init__(self,roster,in_type,out_type)

		Parameters:
		roster - list of names in format "surname, name"
		in_type - string, in file format. Defaults to "cvs".
		out_type - string, out file format. Defaults to "txt".

		Description:
		Creaters an instance of IOManager with specificed reoster,
		in type, and out type.

	IOManager.read(self, path)

		Parameters:
		path - string, representing the path to the input file.
		
		Description:
		Helper function that calls the specific read function associated
		with the set in_type.

	IOManager.write(self, path, teams)

		Parameters:
		path - string, representing the file to output the teams to.
		teams - list of teams that will be output.

		Description:
		Helper function that calls the appropriate write function for the
		currently set out_type. Also passes the input on to the called
		function.

	IOManager.csvReader(self, path)

		Parameters:
		path - a string of the path to the input file

		Description:
		Pulls the data from the file specified in path. This data is then input
		into the ADTs(Student,Day) that the main algorithm will use.

	IOManager.txtWriter(self,path,teams)

		Parameters:
		path - a string of the file path to be written to.
		teams - a list of Team objects that will be written to file.

		Description:
		Writes the teams out to the a txt file specified by path.

	IOmanager.blockParser(self,block)

		Parameters:
		block - a string to be parsed

		Description:
		Parses the block to an easier to manage format.

	IOmanager.nameChecker(self, name)

		Parameters:
		name - string of a student name

		Description:
		Returns a tuple where the first element is a boolean of the match success.
		The second element in the tuple is the name that the input was matched to
		from the roster.

		
